//Linked list---search,insertion,deletion
#include<iostream>
using namespace std;
//class linkedlist;
class Node
{
    public:
    int data;
    Node* link;
    Node()
    {
		data = 0;
		link = NULL;
	}
    Node(int data)
    {
        this->data = data;
        this->link = NULL;
    }
    friend class linkedlist;
};
class linkedlist
{
    Node* head;
    public:
    linkedlist()
    {
        head=NULL;
    }
    public:
    void insert(int);
    void search(int);
    void del(int);
    void display();
};
void linkedlist::insert(int ITEM)
{
    //create();
    Node* NEW=new Node(ITEM);
    if(NEW==NULL)
    {
        cout<<"Overflow"<<endl;
    }
    if(head == NULL)
    {
        head = NEW;
    }
    else
    {
        Node* PTR=head;
        while(PTR->link!=NULL)
        {
            PTR = PTR->link;
        }
        PTR->link = NEW;
    }
    //cout<<"Node inserted"<<endl;  

}
void linkedlist::search(int ITEM)
{
    Node* PTR=head;
    int LOC = 1;
    while(PTR!=NULL)
    {
        if(ITEM==PTR->data)
        {
            cout<<"The element is found at "<<"index no : "<<LOC-1<<endl;
            return;
        }
        else
        {
            PTR=PTR->link;
            LOC++;
        }
    }
    cout<<"Element not in the list "<<endl;
}
void linkedlist::del(int ITEM)
{
    Node* TEMP = head;
    Node* PTR = head->link;
    Node* TEMP1;
    if (head == NULL)
    {
        cout << "UNDERFLOW"<<endl;
    }
    if (head->data == ITEM)
    {
        TEMP1 = head;
        head = head->link;
        delete TEMP1;
        cout << "Item has been deleted successfully............."<<endl;
    }
    while (PTR != NULL)
    {
        if (PTR->data == ITEM)
        {
            TEMP1 = PTR;
            TEMP->link = PTR->link;
            PTR->link = NULL;
            delete TEMP1;
            cout <<"Item has been deleted successfully.............."<<endl;
            return;
        }
        else
        {
            TEMP = PTR;
            PTR = PTR->link;
        }
    }
}
void linkedlist::display()
{
    if(head==NULL)
    {
        cout<<"Overflow"<<endl;
    }
    Node* PTR=head;
    cout<<"Data inside linked list : "<<endl;
    while(PTR!=NULL)
    {
        cout<<PTR->data<<" ";
        PTR=PTR->link;
    }
    cout<<endl<<endl;
}

int main()
{
    int choice;
    linkedlist l;
    do
    {
        cout<<"----------------LINKED LIST OPERATIONS--------------"<<endl;
        cout<<"Choose any option from the following  : "<<endl;
        cout<<"1.Insertion"<<endl;
        cout<<"2.Search"<<endl;
        cout<<"3.Deletion"<<endl;
        cout<<"4.Display"<<endl;
        cout<<"5.Exit"<<endl;
        cout<<"Enter the choice : "<<" ";
        cin>>choice;
        switch(choice)
        {
    
            case 1:
            {
                int p;
                cout<<"Enter the element to be inserted : "<<" ";
                cin>>p;
                l.insert(p);
                cout<<"Element has been successfully inserted "<<endl;
                break;
            }
            case 2:
            {
                int item;
                cout<<"Enter the element to be searched : "<<" ";
                cin>>item;
                l.search(item);
                break;
            }
            case 3:
            {
                int h;
                cout<<"Enter the element to be deleted : "<<" ";
                cin>>h;
                l.del(h);
                break;
            }
            case 4:
            {
                l.display();
                break;
            }
            case 5:
            {
                break;
                default:cout<<"Invalid choice ! Please choose another option"<<endl;
            }
        }
    }
    while(choice!=5);
    return(0);
}