#include<iostream>
using namespace std;
//Definition of Node for Binary search tree
struct BstNode {
	int data; 
	BstNode* left;
	BstNode* right;
};

// Function to create a new Node in heap
BstNode* GetNewNode(int data) {
	BstNode* newNode = new BstNode();
	newNode->data = data;
	newNode->left = newNode->right = NULL;
	return newNode;
}

// To insert data in BST, returns address of root node 
BstNode* Insert(BstNode* root,int data) {
	if(root == NULL) { // empty tree
		root = GetNewNode(data);
	}
	// if data to be inserted is lesser, insert in left subtree. 
	else if(data <= root->data) {
		root->left = Insert(root->left,data);
	}
	// else, insert in right subtree. 
	else {
		root->right = Insert(root->right,data);
	}
	return root;
}
//To search an element in BST, returns true if element is found
bool Search(BstNode* root,int data) {
	if(root == NULL) {
		return false;
	}
	else if(root->data == data) {
		return true;
	}
	else if(data <= root->data) {
		return Search(root->left,data);
	}
	else {
		return Search(root->right,data);
	}
}
int main()
{
    BstNode* root = NULL; 
    int choice;
    do
    {
     // Creating an empty tree
	/*Code to test the logic*/
	cout<<"------------BINARY SEARCH TREE--------------"<<endl;
	cout<<"1. Insertion"<<endl;
	cout<<"2. Deletion"<<endl;
	cout<<"3. Traversal"<<endl;
	cout<<"4. Search"<<endl;
    cout<<"5. Exit"<<endl;
    int choice;
	cout<<"Enter the choice : "<<" ";
	cin>>choice;
    switch(choice)
    {
        case 1:
        {
            int n;
	        cout<<"Enter the number of elements : "<<" ";
	        cin>>n;
	        for(int i=0;i<n;i++)
	        {
	            int m;
	            cout<<"Enter element : "<<" ";
	            cin>>m;
	            root=Insert(root,m);
	        }
        }
        break;
        case 2:
        {
            
        }
        break;
        case 3:
        {
            
        }
        break;
        case 4:
        {
            int number;
	        cout<<"Enter number to be searched : "<<" ";
	        cin>>number;
	        if(Search(root,number) == true) cout<<"Found\n";
	        else cout<<"Not Found\n";
        }
        break;
        case 5:
        {
            break;
        }
        default:cout<<("Wrong Choice\n");
    }
	char p;
	if(choice!=5)
	{
	    cout<<"Do you want to continue(y/n)? : "<<" ";
	    cin>>p;
	    if(p=='n')
	    {
	        choice=5;
	    }
	}
    }while(choice!= 5);
	return (0);
}
