//Sort
#include<iostream>
using namespace std;
void bubble_sort(int DATA[],int N)
{
    for(int k=0;k<N-1;k++)
    {
        for(int j=0;j<N-k;j++)
        {
            if (DATA[j]>DATA[j+1])
            {
                int TEMP=DATA[j+1];
                DATA[j+1]=DATA[j];
                DATA[j]=TEMP;
            }
        }
    }
    cout<<"After Bubble Sort : "<<" ";
    for(int i=0;i<N;i++)
    {
        cout<<DATA[i]<<" ";
    }
}
void selection_sort(int DATA[],int N)
{
    for(int k=1;k<N;k++)
    {
        for(int j=1;j<N-k+1;j++)
        {
            if (DATA[j-1]>DATA[j])
            {
                int TEMP=DATA[j];
                DATA[j]=DATA[j-1];
                DATA[j-1]=TEMP;
            }
        }
    }
    cout<<"After Selection Sort : "<<" ";
    for(int i=0;i<N;i++)
    {
        cout<<DATA[i]<<" ";
    }
}
void insertion_sort(int A[],int N)
{
    for(int k=1;k<N;k++)
    {
        int TEMP=A[k];
        int PTR=k-1;
        while (PTR>=0 && A[PTR]>TEMP)
        {
            A[PTR+1]=A[PTR];
            PTR=PTR-1;
        }
        A[PTR+1]=TEMP;
    }
    cout<<"After Insertion Sort : "<<" ";
    for(int i=0;i<N;i++)
    {
        cout<<A[i]<<" ";
    }
}
void merging(int A,int R,int LBA,int B,int S,int LBB,int *C,int LBC)
{
    int NA=LBA;
    int NB=LBB;
    int PTR=LBC;
    int UBA=LBA+R-1;
    int UBB=LBB+S-1;
    while (NA<=UBA && NB<=UBB)
    {
        if (A[NA]<B[NB])
        {
            C[PTR]=A[NA];
            NA++;
            PTR++;
        }
        else
        {
            C[PTR]=B[NB];
            NB++;
            PTR++;
        }
    }
    if(NA>UBA)
    {
        for(int i=0;i<UBB-NB;i++)
        {
            C[PTR+K]=B[NB+K];
        }
    }
    else
    {
        for(int i=0;i<UBA-NA;i++)
        {
            C[PTR+K]=B[NA+K];
        }
    }
}
void mergepass(int *A,int N,int L,int *B)
{
    int Q=int(N/(2*L));
    int S=2*L*Q;
    int R=N-S;
    for(int J=1;J<Q;J++)
    {
        int LB=1+[(2*J-2)*L];
        merging(A,L,LB,A,L,LB+L,B,LB);
    }
    if (R<=L)
    {
        for(int j=1;j<R;j++)
        {
            B[S+j]=A[S+j];
            merging(A,L,S,A,R-L,L+S,B,S);
        }
    }
}
void mergesort(int *A,int *B,int N)
{
    int L=1;
    while (L<=N)
    {
        mergepass(A,N,L,B);
        mergepass(B,N,2*L,A);
        L=4*L;
    }
}
    

int main()
{
    int choice;
    int N;
    cout<<"Enter the number of elements : "<<" ";
    cin>>N;
    int DATA[N];
    for(int i=0;i<N;i++)
    {
        cin>>DATA[i];
    }
    for(int i=0;i<N;i++)
    {
        cout<<DATA[i]<<" ";
    }
    do
    {
         cout<<"\n----------------------SORTING TECHNIQUES--------------------------"<<endl;
         //cout<<"\n1.Create new set";
    cout<<"\n1.Bubble Sort";
    cout<<"\n2.Selection Sort";
    cout<<"\n3.Insertion Sort";
    cout<<"\n4.Merge Sort";
    //cout<<"\n5.Display";
    cout<<"\n6.Exit";
    cout<<"\nEnter your choice : "<<" ";
    cin>>choice;
    cout<<"Before Sorting : "<<" ";
    for(int i=0;i<N;i++)
    {
        cout<<DATA[i]<<"  ";
    }
    cout<<endl;
    switch(choice)
    {
        case 1:
        {

            bubble_sort(DATA,N);

        }
        break;
        case 2:
        {

            selection_sort(DATA,N);

        }
        break;
        case 3:
        {

            insertion_sort(DATA,N);

        }
        break;
        case 4:
        {
            int B[N];
            mergesort(DATA,B,N);
            //mergesort(A,B,N);
            for(int i=0;i<N;i++)
            {   
                cout<<"SORTED ARRAY 1 : "<<" ";
                cout<<A[i]<<" ";
            }
            for(int i=0;i<N;i++)
            {
                cout<<"SORTED ARRAY 2 : "<<" ";
                cout<<B[i]<<" ";
            }
}

        }
        break;
        case 5:
        {
            //display();

        }
        break;
        case 6:
        {
             break;
        }
        default:cout<<("Wrong choice\n");
    }
    char p;
    if(choice!=6)
    {
        cout<<"\nDo you want to continue(y/n) ? "<<" ";
        cin>>p;
        if (p=='n')
        {
            choice=6;
        }
    }
    }while(choice!=6);
    return(0);
}