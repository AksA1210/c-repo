//Merge Sort
#include<iostream>
using namespace std;
void merge(int A[],int R,int LBA,int B[],int S,int LBB,int C,int LBC)
{
    int NA=LBA;
    int NB=LBB;
    int PTR=LBC;
    int UBA=LBA+R-1;
    int UBB=LBB+S-1;
    while (NA<=UBA && NB<=UBB)
    {
        if (A[NA]<B[NB])
        {
            C[PTR]=A[NA];
            NA++;
            PTR++;
        }
        else
        {
            C[PTR]=B[NB];
            NB++;
            PTR++;
        }
    }
    if(NA>UBA)
    {
        for(int i=0;i<UBB-NB;i++)
        {
            C[PTR+K]=B[NB+K];
        }
    }
    else
    {
        for(int i=0;i<UBA-NA;i++)
        {
            C[PTR+K]=B[NA+K];
        }
    }
}
void mergepass(int A[],int N,int L,int B[])
{
    int Q=int(N/(2*L));
    int S=2*L*Q;
    int R=N-S;
    for(int J=1;J<Q;J++)
    {
        int LB=1+[(2*J-2)*L];
        merge(A,L,LB+L,B,LB);
    }
    if (R<=L)
    {
        for(int j=1;j<R;j++)
        {
            B[S+j]=A[S+j];
            merge(A,L,S+1,A,R-L,L+S+1,B,S+1);
        }
    }
}
void mergesort(int A[],int N)
{
    int L=1;
    while (L<=N)
    {
        mergepass(A,N,L,B);
        mergepass(B,N,2*L,A);
        L=4*L;
    }
}
