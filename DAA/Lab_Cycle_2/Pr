include <bits/stdc++.h>
using namespace std;
#define V 5
bool createsMST(int u, int v, vector<bool> inMST){
   if (u == v)
      return false;
   if (inMST[u] == false && inMST[v] == false)
      return false;
   else if (inMST[u] == true && inMST[v] == true)
      return false;
   return true;
}
void printMinSpanningTree(int cost[][V]){
   vector<bool> inMST(V, false);
   inMST[0] = true;
   int edgeNo = 0, MSTcost = 0;
   while (edgeNo < V - 1) {
      int min = INT_MAX, a = -1, b = -1;
      for (int i = 0; i < V; i++) {
         for (int j = 0; j < V; j++) {
            if (cost[i][j] < min) {
               if (createsMST(i, j, inMST)) {
                  min = cost[i][j];
                  a = i;
                  b = j;
               }
            }
         }
      }
      if (a != -1 && b != -1) {
         cout<<"Edge "<<edgeNo++<<" : ("<<a<<" , "<<b<<" ) : cost = "<<min<<endl;
         MSTcost += min;
         inMST[b] = inMST[a] = true;
      }
   }
   cout<<"Cost of Minimum spanning tree ="<<MSTcost;
}
int main() {
   int cost[][V] = {
      { INT_MAX, 12, INT_MAX, 25, INT_MAX },
      { 12, INT_MAX, 11, 8, 12 },
      { INT_MAX, 11, INT_MAX, INT_MAX, 17 },
      { 25, 8, INT_MAX, INT_MAX, 15 },
      { INT_MAX, 12, 17, 15, INT_MAX },
   };
   cout<<"The Minimum spanning tree for the given tree is :\n";
   printMinSpanningTree(cost);
   return 0;
}
Output
The Minimum spanning tree for the given tree is :
Edge 0 : (0 , 1 ) : cost = 12
Edge 1 : (1 , 3 ) : cost = 8
Edge 2 : (1 , 2 ) : cost = 11
Edge 3 : (1 , 4 ) : cost = 12
Cost of Minimum spanning tree =43
sudhir sharma
sudhir sharma

0 Followers
  Follow
Updated on 03-Feb-2020 11:34:13
 177 Views  0  Print Article
   
 Related Articles
Prim’s Algorithm (Simple Implementation for Adjacency Matrix Representation) in C++
Prim’s MST for Adjacency List Representation
Dijkstra’s Algorithm for Adjacency List Representation
Prim’s Minimum Spanning Tree Algorithm
C++ Program to Implement Adjacency Matrix
Prim’s (Minimum Spanning Tree) MST Algorithm
Difference Between Prim’s and Kruskal’s Algorithm
C++ Program to Represent Graph Using Adjacency Matrix
Algorithm for matrix multiplication in JavaScript
Implementation of a Falling Matrix in C++
Page Rank Algorithm and Implementation using Python
Matrix Representation of Graphs
What is Implementation of Simple Stack Allocation Scheme
Matrix multiplication algorithm
Explain the design and implementation of a simple microsequencer?
C Program for simple interest?
 Previous Page
Next Page  
Advertisements
Video Player is loading.

Annual Membership
Enjoy unlimited access on 5500+ Hand Picked Quality Video Courses

 Subscribe Now

Training for a Team
Affordable solution to train a team and make them project ready.

Tutorials Point
 About us
 Refund Policy
 Terms of use
 Privacy Policy
 FAQ's
 Contact
© Copyright 2022. All Rights Reserved.

We make use of First and third party cookies
